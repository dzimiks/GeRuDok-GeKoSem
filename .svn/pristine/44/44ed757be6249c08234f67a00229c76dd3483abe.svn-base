package gekosem;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Dimension2D;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.Serializable;

import javax.swing.JDialog;

import gekosem.commands.GekosemCommandMannager;
import gui.model.Element;
import gui.model.ElementType;
import gui.model.MainModel;
import gui.model.Slot;
import gui.observer.NotificationObserver;
import gui.view.PaletteView;
import gui.view.SlotView;
import state.StateManager;

@SuppressWarnings("serial")
public class Gekosem extends JDialog implements AdjustmentListener, Serializable {

	private static Slot slot;
	private PaletteView palette;
	private SlotView slotView;
	private static StateManager stateManager;
	private GekosemCommandMannager gkm;

	private AffineTransform transformToUserSpace = new AffineTransform();

	private Point2D lastPosition = null;
	private static Rectangle2D selectionRectangle = new Rectangle2D.Double();

	double translateX = 0;
	double translateY = 0;
	double scaling = 1;

	private Color color = Color.YELLOW;

	public AffineTransform getTransformToUserSpace() {
		return transformToUserSpace;
	}

	public void setTransformToUserSpace(AffineTransform transformToUserSpace) {
		this.transformToUserSpace = transformToUserSpace;
	}

	final static double translateFactor = 10;
	final static double scalingFactor = 1.2;

	public Gekosem(Slot slot) {
		super();
		// super("GeKoSeM", true, true, true, true);
		this.slot = slot;
		this.slot.setType(ElementType.GRAPHIC);
		//this.color = Color.WHITE;
		palette = new PaletteView(slot, this);
		gkm = new GekosemCommandMannager(palette);
		slotView = new SlotView(MainModel.getInstance(), slot);
		stateManager = new StateManager(this);

		slotView.setSize(new Dimension(300, 300));
		setLayout(new BorderLayout());
		setSize(new Dimension(750, 500));
		setLocationRelativeTo(null);
		add(palette, BorderLayout.NORTH);
		add(slotView, BorderLayout.CENTER);

		addWindowListener(new WindowListener() {

			@Override
			public void windowOpened(WindowEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void windowIconified(WindowEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void windowDeiconified(WindowEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void windowDeactivated(WindowEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void windowClosing(WindowEvent e) {
				// TODO Auto-generated method stub

				slot.getSelectionModels().removeAllFromSelectionList();
				slot.notifyObservers(NotificationObserver.ADD, null);

			}

			@Override
			public void windowClosed(WindowEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void windowActivated(WindowEvent e) {
				// TODO Auto-generated method stub

			}
		});

		GekosemController d = new GekosemController();
		slotView.addMouseListener(d);
		slotView.addMouseMotionListener(d);
		slotView.addMouseWheelListener(d);
	}

	/// Promena stanja

	public void startSelectState() {
		stateManager.setSelectState();
	}

	public void startAndState() {
		stateManager.setAndState();
	}

	public void startLassoState() {
		stateManager.setLassoState();
	}

	public void startLassoZoomState() {
		stateManager.setLassoZoomState();
	}

	public void startLinkState() {
		stateManager.setLinkState();
	}

	public void startNotState() {
		stateManager.setNotState();
	}

	public void startOrState() {
		stateManager.setOrState();
	}

	public void startResizeState() {
		stateManager.setResizeState();
	}

	public void startMoveState() {
		stateManager.setMoveState();
	}

	/// ENUM

	public Slot getSlot() {
		return slot;
	}

	public void setSlot(Slot slot) {
		this.slot = slot;
	}

	public PaletteView getPalette() {
		return palette;
	}

	public void setPalette(PaletteView palette) {
		this.palette = palette;
	}

	public SlotView getSlotView() {
		return slotView;
	}

	public void setSlotView(SlotView slotView) {
		this.slotView = slotView;
	}

	public static StateManager getStateManager() {
		return stateManager;
	}

	public void setStateManager(StateManager stateManager) {
		this.stateManager = stateManager;
	}

	@Override
	public void adjustmentValueChanged(AdjustmentEvent e) {
		// TODO Auto-generated method stub

	}

	public void paintComponent(Graphics2D g) {
		repaint();
		slotView.repaint();
	}

	public Point2D getLastPosition() {
		return lastPosition;
	}

	public static Rectangle2D getSelectionRectangle() {
		return selectionRectangle;
	}

	public void setLastPosition(Point2D lastPosition) {
		this.lastPosition = lastPosition;
	}

	public void setSelectionRectangle(Rectangle2D selectionRectangle) {
		this.selectionRectangle = selectionRectangle;
	}

	public Gekosem(Point2D lastPosition, Rectangle2D selectionRectangle) {
		super();
		this.lastPosition = lastPosition;
		this.selectionRectangle = selectionRectangle;
	}

	public enum Handle {
		North, South, East, West, SouthEast, SouthWest, NorthEast, NorthWest
	}

	static final int handleSize = 7;

	private class GekosemController extends MouseAdapter implements MouseMotionListener {

		public void mousePressed(MouseEvent e) {
			lastPosition = e.getPoint();
			transformToUserSpace(lastPosition);

			getStateManager().getCurrentState().mousePressed(e);
		}

		public void mouseReleased(MouseEvent e) {

			getStateManager().getCurrentState().mouseReleased(e);
		}

		public void mouseDragged(MouseEvent e) {

			getStateManager().getCurrentState().mouseDragged(e);
		}

		public void mouseMoved(MouseEvent e) {

			getStateManager().getCurrentState().mouseMoved(e);
		}

		// public void mouseWheelMoved(MouseWheelEvent e) {
		// if ((e.getModifiers() & MouseWheelEvent.CTRL_MASK) != 0) { // Ako
		// // pritisnut
		// // Ctrl
		// double newScaling = scaling;
		// if (e.getWheelRotation() > 0)
		// newScaling *= (double) e.getWheelRotation() * scalingFactor;
		// else
		// newScaling /= -(double) e.getWheelRotation() * scalingFactor;
		// if (newScaling < 0.2)
		// newScaling = 0.2;
		// if (newScaling > 5)
		// newScaling = 5;
		//
		// Point2D oldPosition = e.getPoint();
		// transformToUserSpace(oldPosition);
		//
		// scaling = newScaling;
		// setupTransformation();
		//
		// Point2D newPosition = e.getPoint();
		// transformToUserSpace(newPosition);
		//
		// translateX += newPosition.getX() - oldPosition.getX();
		// translateY += newPosition.getY() - oldPosition.getY();
		// setupTransformation();
		//
		// } else if ((e.getModifiers() & MouseWheelEvent.SHIFT_MASK) != 0) { //
		// Ako
		// // je
		// // pritisnut
		// // Shift
		// translateX += (double) e.getWheelRotation() * translateFactor /
		// scaling;
		// } else { // u ostalim slučajevima vršimo skrolovanje po Y osi
		// translateY += (double) e.getWheelRotation() * translateFactor /
		// scaling;
		// }
		//
		// setupTransformation();
		// repaint();
		// }

	}

	private void setupTransformation() {
		transformToUserSpace.setToIdentity();
		// Zumiranje

		transformToUserSpace.scale(scaling, scaling);
		// Skrolovanje
		transformToUserSpace.translate(translateX, translateY);

	}

	public void transformToUserSpace(Point2D p) {
		try {
			transformToUserSpace.inverseTransform(p, p);
		} catch (NoninvertibleTransformException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static void paintSelectionHandles(Graphics2D g2, Slot slot) {

		for (Element e : slot.getSelectionModels().getSelectionList()) {
			if (e instanceof GraphicShape) {
				GraphicShape device = (GraphicShape) e;
				// Iscrtavanje pravougaonika sa isprekidanom linijom
				g2.setStroke(new BasicStroke((float) 1, BasicStroke.CAP_SQUARE, BasicStroke.JOIN_BEVEL, 1f,
						new float[] { 3f, 6f }, 0));
				g2.setPaint(Color.BLACK);

				g2.drawRect((int) device.getPosition().getX(), (int) device.getPosition().getY(),
						(int) device.getSize().getWidth(), (int) device.getSize().getHeight());

				// Iscrtavanje hendlova
				for (Handle e1 : Handle.values()) {
					paintSelectionHandle(g2, getHandlePoint(device.getPosition(), device.getSize(), e1));
				}

			} else {
				LinkElement link = (LinkElement) e;

				Point2D bp = null;
				bp = link.getOut().getPosition();
				g2.setPaint(Color.BLACK);
				g2.setStroke(new BasicStroke((float) 2, BasicStroke.CAP_SQUARE, BasicStroke.JOIN_BEVEL));

				g2.drawRect((int) bp.getX() - handleSize / 2, (int) bp.getY() - handleSize / 2, handleSize, handleSize);

				for (Point2D e1 : link.getPoints()) {
					g2.drawRect((int) bp.getX() - handleSize / 2, (int) bp.getY() - handleSize / 2, handleSize,
							handleSize);

				}

				bp = link.getIn().getPosition();
				g2.drawRect((int) bp.getX() - handleSize / 2, (int) bp.getY() - handleSize / 2, handleSize, handleSize);
			}
		}

	}

	private static void paintSelectionHandle(Graphics2D g2, Point2D position) {
		double size = handleSize;
		g2.fill(new Rectangle2D.Double(position.getX() - size / 2, position.getY() - size / 2, size, size));
	}

	private static Point2D getHandlePoint(Point2D topLeft, Dimension2D size, Handle handlePosition) {
		double x = 0, y = 0;

		// Doređivanje y koordinate

		// Ako su gornji hendlovi
		if (handlePosition == Handle.NorthWest || handlePosition == Handle.North
				|| handlePosition == Handle.NorthEast) {
			y = topLeft.getY();
		}
		// Ako su centralni po y osi
		if (handlePosition == Handle.East || handlePosition == Handle.West) {
			y = topLeft.getY() + size.getHeight() / 2;
		}
		// Ako su donji
		if (handlePosition == Handle.SouthWest || handlePosition == Handle.South
				|| handlePosition == Handle.SouthEast) {
			y = topLeft.getY() + size.getHeight();
		}

		// Određivanje x koordinate

		// Ako su levi
		if (handlePosition == Handle.NorthWest || handlePosition == Handle.West || handlePosition == Handle.SouthWest) {
			x = topLeft.getX();
		}
		// ako su centralni po x osi
		if (handlePosition == Handle.North || handlePosition == Handle.South) {
			x = topLeft.getX() + size.getWidth() / 2;
		}
		// ako su desni
		if (handlePosition == Handle.NorthEast || handlePosition == Handle.East || handlePosition == Handle.SouthEast) {
			x = topLeft.getX() + size.getWidth();
		}

		return new Point2D.Double(x, y);

	}

	public void setMouseCursor(Point2D point) {

		Handle handle = getDeviceAndHandleForPoint(point);

		if (handle != null) {
			Cursor cursor = null;

			switch (handle) {
			case North:
				cursor = Cursor.getPredefinedCursor(Cursor.N_RESIZE_CURSOR);
				break;
			case South:
				cursor = Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR);
				break;
			case East:
				cursor = Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR);
				break;
			case West:
				cursor = Cursor.getPredefinedCursor(Cursor.W_RESIZE_CURSOR);
				break;
			case SouthEast:
				cursor = Cursor.getPredefinedCursor(Cursor.SE_RESIZE_CURSOR);
				break;
			case NorthWest:
				cursor = Cursor.getPredefinedCursor(Cursor.NW_RESIZE_CURSOR);
				break;
			case SouthWest:
				cursor = Cursor.getPredefinedCursor(Cursor.SW_RESIZE_CURSOR);
				break;
			case NorthEast:
				cursor = Cursor.getPredefinedCursor(Cursor.NE_RESIZE_CURSOR);
				break;
			}
			slotView.setCursor(cursor);
		} else
			slotView.setCursor(Cursor.getDefaultCursor());
	}

	/**
	 * Određuje handl i uređaj koji se nalazi na zadatoj lokaciji
	 * 
	 * @param point
	 *            Ulazni parametar koji određuje lokaciju
	 * @return Hendl za zadatu poziciju. Ukoliko je null tada je device
	 *         nedefinisan.
	 */
	public Handle getDeviceAndHandleForPoint(Point2D point) {
		for (Element e : slot.getSelectionModels().getSelectionList()) {
			return getHandleForPoint((GraphicElement) e, point);
		}
		return null;
	}

	/**
	 * Za zadatu tačku i uređaj vraća hendl.
	 * 
	 * @param device
	 * @param point
	 * @return Hendl ukoliko je "pogođen", u suprotnom vraća null
	 */
	private Handle getHandleForPoint(GraphicElement element, Point2D point) {
		for (Handle h : Handle.values()) {
			if (isPointInHandle(element, point, h)) {
				return h;
			}
		}
		return null;
	}

	public GraphicShape getDeviceForHandlePoint(Point2D point) {
		GraphicShape shape;
		
		for(Element e : slot.getSelectionModels().getSelectionList()){
			if(e instanceof GraphicShape){
				shape = (GraphicShape) e;
				if(getHandleForPoint((GraphicElement) e, point) != null){
					return shape;
				}
			}
		}
		return null;
	}

	private boolean isPointInHandle(GraphicElement element, Point2D point, Handle handle) {
		if (element instanceof GraphicShape) {
			GraphicShape device = (GraphicShape) element;
			Point2D handleCenter = getHandlePoint(device.getPosition(), device.getSize(), handle);
			return ((Math.abs(point.getX() - handleCenter.getX()) <= (double) handleSize / 2)
					&& (Math.abs(point.getY() - handleCenter.getY()) <= (double) handleSize / 2));
		} else
			return false;
	}

	// /**
	// * Metoda radi best-fit zoom elemenata na dijagramu
	// *
	// */
	// public void bestFitZoom() {
	// selectionFit();
	//
	// }
	//
	// public void selectionFit() {
	// double minX = 0, minY = 0, maxX = 0, maxY = 0;
	// java.util.Iterator<Node> it = slot.getChildren().iterator();
	//
	// while (it.hasNext()) {
	// GraphicElement element = (GraphicElement) it.next();
	// if (element instanceof GraphicShape) {
	// GraphicShape device = (GraphicShape) element;
	// minX = device.getPosition().getX();
	// minY = device.getPosition().getY();
	// maxX = device.getPosition().getX() + device.getSize().getWidth();
	// maxY = device.getPosition().getY() + device.getSize().getHeight();
	// while (it.hasNext()) {
	// element = (GraphicElement) it.next();
	// if (element instanceof GraphicShape) {
	// device = (GraphicShape) element;
	// if (device.getPosition().getX() < minX)
	// minX = device.getPosition().getX();
	// if (device.getPosition().getX() + device.getSize().getWidth() > maxX)
	// maxX = device.getPosition().getX() + device.getSize().getWidth();
	// if (device.getPosition().getY() < minY)
	// minY = device.getPosition().getY();
	// if (device.getPosition().getY() + device.getSize().getHeight() > maxY)
	// maxY = device.getPosition().getY() + device.getSize().getHeight();
	// }
	// }
	//
	// }
	// }
	//
	// regionZoom(minX, maxX, minY, maxY);
	// }
	//
	// public void regionZoom(double minX, double maxX, double minY, double
	// maxY) {
	// double minXX, maxXX, minYY, maxYY;
	// maxXX = transformLineToUserSpaceX(maxX);
	// minXX = transformLineToUserSpaceX(minX);
	// maxYY = transformLineToUserSpaceY(maxY);
	// minYY = transformLineToUserSpaceY(minY);
	//
	// double regionWidth = maxXX - minXX;
	// double regionHeight = maxYY - minYY;
	// int deviceWidth = this.getWidth();
	// int deviceHeight = this.getHeight();
	// double newScaling = transformToUserSpace.getScaleX();
	// if (regionWidth != 0 && regionHeight != 0) {
	// double scaleX = (deviceWidth / regionWidth);
	// double scaleY = (deviceHeight / regionHeight);
	//
	// if (scaleX < scaleY) {
	// newScaling *= scaleX;
	// } else {
	// newScaling *= scaleY;
	// }
	// if (newScaling < 0.2)
	// newScaling = 0.2;
	// if (newScaling > 5)
	// newScaling = 5;
	// transformToUserSpace.setToScale(newScaling, newScaling);
	// }
	//
	// maxXX = transformLineToUserSpaceX(maxX);
	// minXX = transformLineToUserSpaceX(minX);
	// maxYY = transformLineToUserSpaceY(maxY);
	// minYY = transformLineToUserSpaceY(minY);
	// regionWidth = maxXX - minXX;
	// regionHeight = maxYY - minYY;
	// transformToUserSpace.translate((-minXX + (deviceWidth - regionWidth) / 2)
	// / transformToUserSpace.getScaleX(),
	// (-minYY + (deviceHeight - regionHeight) / 2) /
	// transformToUserSpace.getScaleY());
	// repaint();
	// }
	//
	// public double transformLineToUserSpaceX(double deviceSpace) {
	// return deviceSpace * transformToUserSpace.getScaleX() +
	// transformToUserSpace.getTranslateX();
	// }
	//
	// public double transformLineToUserSpaceY(double deviceSpace) {
	// return deviceSpace * transformToUserSpace.getScaleY() +
	// transformToUserSpace.getTranslateY();
	// }

	public GekosemCommandMannager getGkm() {
		return gkm;
	}

	public Color getColor() {
		return color;
	}

	public void setColor(Color color) {
		this.color = color;
	}

}
