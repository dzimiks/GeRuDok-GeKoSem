package gui.commands;

import java.util.ArrayList;
 
import gekosem.GraphicShape;
import gekosem.LinkElement;
import gui.commands.Command;
import gui.commands.Invoker;
import gui.commands.TreeSelectCommand;
import gui.model.MainModel;
import gui.model.Project;
import gui.model.Workspace;
import gui.model.tree.Node;
 
public class DeleteElementCommand extends Command {
 
    private Node node;
    private MainModel model = MainModel.getInstance();
    
    public DeleteElementCommand(Node node) {
        this.node = node;
    }
    
    @Override
    public void doCommand() {
        
        if (node instanceof Workspace || node == null)
            return;
        
        Node parent = (Node) node.getParent();
        
        if (node instanceof Project) {
            for (Node child : node.getChildren()) {
                this.model.getFreeDocuments().add(child);
                this.model.doReloadFreeDocuments();
            }
        }
        
        if (node instanceof GraphicShape) {
            
            ArrayList<Node> linkoviZaBrisanje = new ArrayList<>();
            for (Node n : parent.getChildren()){
                if(n instanceof LinkElement && (((LinkElement)n).getStart().equals(node)
                        || ((LinkElement)n).getEnd().equals(node))){
                    linkoviZaBrisanje.add(n);
                }
            } 
            
            for (Node n : linkoviZaBrisanje)
                Invoker.getInstance().executeCommand(new DeleteElementCommand(n));
        }
        
        node.removeFromParent();
        model.getTreeModel().reload();
        Invoker.getInstance().executeCommand(new TreeSelectCommand(model, parent));
    }
}